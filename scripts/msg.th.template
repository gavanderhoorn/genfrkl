@####################################################
@#
@# Copyright 2015 TU Delft Robotics Institute
@#
@# Licensed under the Apache License, Version 2.0 (the "License");
@# you may not use this file except in compliance with the License.
@# You may obtain a copy of the License at
@#
@#     http://www.apache.org/licenses/LICENSE-2.0
@#
@# Unless required by applicable law or agreed to in writing, software
@# distributed under the License is distributed on an "AS IS" BASIS,
@# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@# See the License for the specific language governing permissions and
@# limitations under the License.
@#
@# author: G.A. vd. Hoorn (TU Delft Robotics Institute)
@#
@####################################################
@#
@# ROS message source code generation for Fanuc Karel
@#
@# EmPy template for generating <msg>.th.kl files
@#
@####################################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of the .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@#
@####################################################
@{
import genmsg.msgs
import genfrkl
import genfrkl.karel

# global settings
LINE_WIDTH = 72
}@


--------------------------------------------------------------------------------
--
-- @(spec.package)/@(spec.short_name) (@(kl_libname)) shared type / constant decls
--
-- Autogenerated by genmsg_frkl from @file_name_in
--
-- MD5 of source ROS msg: @md5sum
--
--------------------------------------------------------------------------------

TYPE
	@(kl_structname) FROM @(kl_libname) = STRUCTURE
@{
for field in spec.parsed_fields():
    # look-up the target type
    mapped_type = mapped_types[field.base_type]

    # TODO: this does not really make sense, should probably throw
    if not genfrkl.karel.is_legal_ident(field.name):
        print "\t\t-- skipping '%s': illegal name" % (field.name)
        continue

    tgt_type = mapped_type.tgt_type
    if field.is_array:
        if field.array_len is None:
            # TODO: throw
            # actually a list, not supported right now
            tgt_type = "LIST[] OF %s" % mapped_type.tgt_type
        else:
            tgt_type = "ARRAY[%s] OF %s" % (field.array_len, mapped_type.tgt_type)

    print "\t\t%-12s : %-23s -- %s" % (field.name, tgt_type, mapped_type.src_type)
}@
	ENDSTRUCTURE

	-- convenience: 'List ITem type' and 'LiST type'
	@(kl_smname)_lit_t FROM @(kl_libname) = @(kl_structname)
	@(kl_smname)_lst_t FROM @(kl_libname) = PATH NODEDATA = @(kl_smname)_lit_t


CONST
	-- autogenerated constants
	@(kl_smname.upper())_ID    = @(mapped_msg_type)
@{
# add all constants defined in the ROS msg.
# note that we ignore the types, as Karel constant declarations do not
# include any type info.
if len(spec.constants) > 0:
    print ""
    print "\t-- constants defined in ROS msg def"
    print "\t-- TODO: properly escape strings (embedded single quotes, etc)"

    for constant in spec.constants:
        # check for legal name
        cmt = ""
        pfx = ""
        if not genfrkl.karel.is_legal_ident(constant.name):
            pfx = "--"
            cmt = " -- WARNING: illegal name"

        val = constant.val
        if constant.type is 'string':
            val = genfrkl.karel.quote_str(val)
        print "\t%s%-12s = %s%s" % (pfx, constant.name, val, cmt)
}@
