@####################################################
@#
@# ROS message source code generation for Fanuc Karel
@#
@# EmPy template for generating <msg>.th.kl files
@#
@####################################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of the .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@#
@####################################################
-- Copyright 2015 TU Delft Robotics Institute
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
--     http://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
@{
import genmsg.msgs
import genfrkl


sm_id_data = genfrkl.load_id_mapper_file('sm_assigned_ids.yaml')

mapped_msg_type = sm_id_data[md5sum]             # 10
msg_id_hex      = '%04X'      % mapped_msg_type  # '000A'
kl_smname       = 'sm%04X'    % mapped_msg_type  # 'sm000A'
kl_structname   = 'sm%04X_t'  % mapped_msg_type  # 'sm000A_t'
kl_libname      = 'libsm%04X' % mapped_msg_type  # 'libsm000A'

# global settings
LINE_WIDTH = 72
}@


--------------------------------------------------------------------------------
-- 
-- @(spec.package)/@(spec.short_name) (@(kl_libname)) shared type / constant decls
-- 
-- Autogenerated by genmsg_frkl from @file_name_in
-- 
-- MD5 of source ROS msg: @md5sum
-- 
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
-- 
--------------------------------------------------------------------------------

TYPE
    @(kl_structname) FROM @(kl_libname) = STRUCTURE
@{
for field in spec.parsed_fields():
  # check for legal name
  if not genfrkl.is_legal_kl_ident(field.name):
    print "        -- skipping '%s': illegal name" % field.name
  else:
    kl_type = genfrkl.msg_type_to_kl(spec.package, field.type)
    print "        %-12s : %s" % (field.name, kl_type)
}@
    ENDSTRUCTURE

    -- convenience: 'List ITem type' and 'LiST type'
    @(kl_smname)_lit_t FROM @(kl_libname) = @(kl_structname)
    @(kl_smname)_lst_t FROM @(kl_libname) = PATH NODEDATA = @(kl_smname)_lit_t


CONST
    -- autogenerated constants
    @(kl_smname.upper())_ID    = @(mapped_msg_type)
@{
if len(spec.constants) > 0:
  print ""
  print "    -- constants defined in ROS msg def"
  print "    -- TODO: properly escape strings (embedded single quotes, etc)"

  for constant in spec.constants:
    # check for legal name
    cmt = ""
    pfx = ""
    if not genfrkl.is_legal_kl_ident(constant.name):
      pfx = "--"
      cmt = " -- WARNING: illegal name"

    val = constant.val
    if constant.type is 'string':
      val = genfrkl.karel_str_quote(val)
    print "    %s%-12s = %s%s" % (pfx, constant.name, val, cmt)
}@
